const { sequelize } = require('./config/db');

async function runCommissionMigrations() {
  try {
    console.log('Ch·∫°y migrations cho h·ªá th·ªëng hoa h·ªìng...');

    // 1. Th√™m c√°c tr∆∞·ªùng hoa h·ªìng v√†o booking
    console.log('1. Th√™m tr∆∞·ªùng hoa h·ªìng v√†o b·∫£ng booking...');
    
    const [commissionFields] = await sequelize.query(`
      SELECT COLUMN_NAME 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_NAME = 'booking' AND COLUMN_NAME = 'commission_rate'
      AND TABLE_SCHEMA = DATABASE()
    `);
    
    if (commissionFields.length === 0) {
      await sequelize.query(`
        ALTER TABLE booking 
        ADD COLUMN commission_rate DECIMAL(5,2) NULL COMMENT 'T·ª∑ l·ªá hoa h·ªìng admin (%)',
        ADD COLUMN admin_commission DECIMAL(12,2) NULL COMMENT 'S·ªë ti·ªÅn hoa h·ªìng admin nh·∫≠n ƒë∆∞·ª£c',
        ADD COLUMN agency_amount DECIMAL(12,2) NULL COMMENT 'S·ªë ti·ªÅn agency nh·∫≠n ƒë∆∞·ª£c sau khi tr·ª´ hoa h·ªìng',
        ADD COLUMN commission_calculated_at DATETIME NULL COMMENT 'Th·ªùi ƒëi·ªÉm t√≠nh hoa h·ªìng'
      `);
      
      await sequelize.query(`
        CREATE INDEX idx_booking_commission_calculated_at ON booking(commission_calculated_at)
      `);
      
      console.log('‚úÖ ƒê√£ th√™m tr∆∞·ªùng hoa h·ªìng v√†o booking');
    } else {
      console.log('‚úÖ Tr∆∞·ªùng hoa h·ªìng ƒë√£ t·ªìn t·∫°i trong booking');
    }

    // 2. T·∫°o b·∫£ng commission_settings
    console.log('2. T·∫°o b·∫£ng commission_settings...');
    
    const [settingsTable] = await sequelize.query(`
      SELECT TABLE_NAME 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_NAME = 'commission_settings' AND TABLE_SCHEMA = DATABASE()
    `);
    
    if (settingsTable.length === 0) {
      await sequelize.query(`
        CREATE TABLE commission_settings (
          id CHAR(36) PRIMARY KEY,
          user_id CHAR(36) NOT NULL,
          commission_rate DECIMAL(5,2) NOT NULL DEFAULT 15.00 COMMENT 'T·ª∑ l·ªá hoa h·ªìng admin (%)',
          min_booking_value DECIMAL(12,2) NULL COMMENT 'Gi√° tr·ªã booking t·ªëi thi·ªÉu',
          max_booking_value DECIMAL(12,2) NULL COMMENT 'Gi√° tr·ªã booking t·ªëi ƒëa',
          tour_category_id CHAR(36) NULL COMMENT '√Åp d·ª•ng cho danh m·ª•c tour c·ª• th·ªÉ',
          effective_from DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
          effective_to DATETIME NULL,
          is_active BOOLEAN DEFAULT TRUE,
          created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          
          INDEX idx_cs_user_id (user_id),
          INDEX idx_cs_category (tour_category_id),
          INDEX idx_cs_effective (effective_from, effective_to),
          INDEX idx_cs_active (is_active),
          
          FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
          FOREIGN KEY (tour_category_id) REFERENCES tour_category(id) ON UPDATE CASCADE ON DELETE SET NULL
        )
      `);
      
      console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng commission_settings');
    } else {
      console.log('‚úÖ B·∫£ng commission_settings ƒë√£ t·ªìn t·∫°i');
    }

    // 3. Th√™m m·ªôt s·ªë c·∫•u h√¨nh hoa h·ªìng m·∫∑c ƒë·ªãnh
    console.log('3. Th√™m c·∫•u h√¨nh hoa h·ªìng m·∫∑c ƒë·ªãnh...');
    
    const [existingSettings] = await sequelize.query(`
      SELECT COUNT(*) as count FROM commission_settings
    `);
    
    if (existingSettings[0].count === 0) {
      // L·∫•y danh s√°ch agencies
      const [agencies] = await sequelize.query(`
        SELECT id, name FROM users WHERE role LIKE '%agency%' LIMIT 3
      `);
      
      for (const agency of agencies) {
        const settingId = require('uuid').v4();
        await sequelize.query(`
          INSERT INTO commission_settings (id, user_id, commission_rate, effective_from)
          VALUES (?, ?, ?, NOW())
        `, {
          replacements: [settingId, agency.id, 15.00]
        });
        
        console.log(`   - ƒê√£ t·∫°o c·∫•u h√¨nh hoa h·ªìng 15% cho ${agency.name}`);
      }
    } else {
      console.log('‚úÖ ƒê√£ c√≥ c·∫•u h√¨nh hoa h·ªìng');
    }

    console.log('\nüéâ Ho√†n th√†nh migrations h·ªá th·ªëng hoa h·ªìng!');

  } catch (error) {
    console.error('‚ùå L·ªói ch·∫°y migrations:', error.message);
  } finally {
    process.exit();
  }
}

runCommissionMigrations();
