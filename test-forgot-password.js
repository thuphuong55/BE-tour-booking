const axios = require('axios');

const testForgotPasswordFlow = async () => {
  try {
    console.log('üß™ Test Forgot Password Flow...');
    
    const baseURL = 'http://localhost:5001/api/auth';
    
    // Test email (s·ª≠ d·ª•ng email c√≥ s·∫µn trong system)
    const testEmail = 'test123@example.com'; // Thay b·∫±ng email th·∫≠t c√≥ trong database
    
    // Step 1: Request OTP
    console.log('\n1Ô∏è‚É£ Test POST /api/auth/forgot-password');
    let otpFromEmail = '';
    try {
      const response = await axios.post(`${baseURL}/forgot-password`, {
        email: testEmail
      });
      console.log('‚úÖ Forgot Password Success:', response.data);
      
      // Trong development mode, OTP s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ ƒë·ªÉ test
      if (response.data.debug && response.data.debug.otp) {
        otpFromEmail = response.data.debug.otp;
        console.log('üî¢ OTP for testing:', otpFromEmail);
      }
    } catch (error) {
      console.log('‚ùå Forgot Password Error:', error.response?.data || error.message);
      return;
    }

    if (!otpFromEmail) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ OTP ƒë·ªÉ test ti·∫øp. Ki·ªÉm tra email ho·∫∑c d√πng email c√≥ s·∫µn trong database.');
      return;
    }

    // Step 2: Verify OTP
    console.log('\n2Ô∏è‚É£ Test POST /api/auth/verify-otp');
    let resetToken = '';
    try {
      const response = await axios.post(`${baseURL}/verify-otp`, {
        email: testEmail,
        otp: otpFromEmail
      });
      console.log('‚úÖ Verify OTP Success:', response.data);
      resetToken = response.data.resetToken;
    } catch (error) {
      console.log('‚ùå Verify OTP Error:', error.response?.data || error.message);
      return;
    }

    // Step 3: Reset Password v·ªõi token
    console.log('\n3Ô∏è‚É£ Test POST /api/auth/reset-password-with-token');
    try {
      const response = await axios.post(`${baseURL}/reset-password-with-token`, {
        resetToken: resetToken,
        password: 'newPassword123',
        confirmPassword: 'newPassword123'
      });
      console.log('‚úÖ Reset Password Success:', response.data);
    } catch (error) {
      console.log('‚ùå Reset Password Error:', error.response?.data || error.message);
      return;
    }

    // Step 4: Test login v·ªõi password m·ªõi
    console.log('\n4Ô∏è‚É£ Test login with new password');
    try {
      const response = await axios.post(`${baseURL}/login`, {
        email: testEmail,
        password: 'newPassword123'
      });
      console.log('‚úÖ Login with new password Success:', response.data);
    } catch (error) {
      console.log('‚ùå Login with new password Error:', error.response?.data || error.message);
    }

    // Test c√°c edge cases
    console.log('\nüß™ Testing Edge Cases...');

    // Test wrong OTP
    console.log('\n5Ô∏è‚É£ Test verify wrong OTP (should fail)');
    try {
      const response = await axios.post(`${baseURL}/verify-otp`, {
        email: testEmail,
        otp: '123456' // Wrong OTP
      });
      console.log('‚ùå Wrong OTP should have failed:', response.data);
    } catch (error) {
      console.log('‚úÖ Wrong OTP correctly failed:', error.response?.data || error.message);
    }

    // Test forgot password with non-existent email
    console.log('\n6Ô∏è‚É£ Test forgot password with non-existent email');
    try {
      const response = await axios.post(`${baseURL}/forgot-password`, {
        email: 'nonexistent@example.com'
      });
      console.log('‚úÖ Non-existent email response:', response.data);
    } catch (error) {
      console.log('‚ùå Non-existent email error:', error.response?.data || error.message);
    }

    console.log('\nüéâ Forgot Password Flow Test ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói t·ªïng qu√°t:', error.message);
  }
};

testForgotPasswordFlow();
