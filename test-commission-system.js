const { Booking, Tour, User, CommissionSetting } = require('./models');
const CommissionService = require('./services/commissionService');

async function testCommissionSystem() {
  try {
    console.log('üè¶ Test h·ªá th·ªëng hoa h·ªìng...\n');

    // 1. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
    console.log('1. Ki·ªÉm tra c·∫•u tr√∫c database:');
    
    const [bookingStructure] = await require('./models').sequelize.query('DESCRIBE booking');
    const commissionFields = bookingStructure.filter(field => 
      ['commission_rate', 'admin_commission', 'agency_amount', 'commission_calculated_at'].includes(field.Field)
    );
    
    console.log('   Tr∆∞·ªùng hoa h·ªìng trong booking:');
    commissionFields.forEach(field => {
      console.log(`   - ${field.Field}: ${field.Type}`);
    });

    // 2. Ki·ªÉm tra b·∫£ng commission_settings
    const settingsCount = await CommissionSetting.count();
    console.log(`\n   S·ªë c·∫•u h√¨nh hoa h·ªìng: ${settingsCount}`);

    // 3. T·∫°o c·∫•u h√¨nh hoa h·ªìng test
    console.log('\n2. T·∫°o c·∫•u h√¨nh hoa h·ªìng test:');
    
    const [agencies] = await require('./models').sequelize.query(`
      SELECT id, name FROM users WHERE role LIKE '%agency%' LIMIT 1
    `);
    
    if (agencies.length > 0) {
      const agency = agencies[0];
      
      // Ki·ªÉm tra xem ƒë√£ c√≥ c·∫•u h√¨nh ch∆∞a
      let setting = await CommissionSetting.findOne({
        where: { user_id: agency.id }
      });
      
      if (!setting) {
        setting = await CommissionSetting.create({
          user_id: agency.id,
          commission_rate: 18.50, // 18.5%
          effective_from: new Date()
        });
        console.log(`   ‚úÖ T·∫°o c·∫•u h√¨nh hoa h·ªìng 18.5% cho ${agency.name}`);
      } else {
        console.log(`   ‚úÖ ƒê√£ c√≥ c·∫•u h√¨nh hoa h·ªìng cho ${agency.name}`);
      }

      // 4. Test t√¨m t·ª∑ l·ªá hoa h·ªìng
      console.log('\n3. Test t√¨m t·ª∑ l·ªá hoa h·ªìng:');
      const rate = await CommissionSetting.findCommissionRate(agency.id, 2000000);
      console.log(`   T·ª∑ l·ªá hoa h·ªìng cho booking 2,000,000 VNƒê: ${rate}%`);

      // 5. Test v·ªõi booking th·ª±c
      console.log('\n4. Test t√≠nh hoa h·ªìng v·ªõi booking th·ª±c:');
      
      const [bookings] = await require('./models').sequelize.query(`
        SELECT b.*, t.agency_id 
        FROM booking b 
        JOIN tour t ON b.tour_id = t.id 
        WHERE b.status = 'confirmed' 
        AND b.commission_calculated_at IS NULL
        AND t.agency_id = ?
        LIMIT 1
      `, {
        replacements: [agency.id]
      });

      if (bookings.length > 0) {
        const booking = bookings[0];
        console.log(`   Booking ID: ${booking.id}`);
        console.log(`   T·ªïng ti·ªÅn: ${parseFloat(booking.total_price).toLocaleString()} VNƒê`);
        
        // T√≠nh hoa h·ªìng
        const result = await CommissionService.calculateCommission(booking.id);
        
        if (result.success) {
          console.log('   ‚úÖ T√≠nh hoa h·ªìng th√†nh c√¥ng:');
          console.log(`   - T·ª∑ l·ªá hoa h·ªìng: ${result.data.commission_rate}%`);
          console.log(`   - Hoa h·ªìng admin: ${result.data.admin_commission.toLocaleString()} VNƒê`);
          console.log(`   - S·ªë ti·ªÅn agency: ${result.data.agency_amount.toLocaleString()} VNƒê`);
        } else {
          console.log('   ‚ùå L·ªói t√≠nh hoa h·ªìng:', result.message);
        }
      } else {
        // T·∫°o v√≠ d·ª• t√≠nh hoa h·ªìng th·ªß c√¥ng
        console.log('   Kh√¥ng c√≥ booking th·ª±c, t·∫°o v√≠ d·ª•:');
        const totalPrice = 2000000;
        const commissionRate = rate;
        const adminCommission = Math.round(totalPrice * (commissionRate / 100));
        const agencyAmount = totalPrice - adminCommission;
        
        console.log(`   - T·ªïng ti·ªÅn tour: ${totalPrice.toLocaleString()} VNƒê`);
        console.log(`   - T·ª∑ l·ªá hoa h·ªìng: ${commissionRate}%`);
        console.log(`   - Hoa h·ªìng admin: ${adminCommission.toLocaleString()} VNƒê`);
        console.log(`   - S·ªë ti·ªÅn agency: ${agencyAmount.toLocaleString()} VNƒê`);
      }
    } else {
      console.log('   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y agency n√†o ƒë·ªÉ test');
    }

    // 6. Test b√°o c√°o hoa h·ªìng
    console.log('\n5. Test b√°o c√°o hoa h·ªìng:');
    const report = await CommissionService.getCommissionReport();
    
    if (report.success) {
      console.log(`   - T·ªïng booking c√≥ hoa h·ªìng: ${report.data.summary.total_bookings}`);
      console.log(`   - T·ªïng doanh thu: ${report.data.summary.total_revenue.toLocaleString()} VNƒê`);
      console.log(`   - T·ªïng hoa h·ªìng admin: ${report.data.summary.total_admin_commission.toLocaleString()} VNƒê`);
      console.log(`   - S·ªë agency: ${report.data.by_agency.length}`);
    }

    console.log('\nüéâ Test h·ªá th·ªëng hoa h·ªìng ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói test:', error.message);
    console.error(error.stack);
  } finally {
    process.exit();
  }
}

testCommissionSystem();
