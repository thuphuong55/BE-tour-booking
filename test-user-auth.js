const axios = require('axios');

const testUserAuthEndpoints = async () => {
  try {
    console.log('üß™ Test User Authentication Endpoints...');
    
    const baseURL = 'http://localhost:5001/api/auth';
    let userToken = '';
    let userId = '';

    // Test data
    const testUser = {
      username: 'testuser2025',
      email: 'testuser2025@example.com',
      password: 'password123',
      role: 'user'
    };

    // 1. Test Register
    console.log('\n1Ô∏è‚É£ Test POST /api/auth/register');
    try {
      const response = await axios.post(`${baseURL}/register`, testUser);
      console.log('‚úÖ Register Success:', response.data);
      userId = response.data.user.id;
    } catch (error) {
      console.log('‚ùå Register Error:', error.response?.data || error.message);
    }

    // 2. Test Login
    console.log('\n2Ô∏è‚É£ Test POST /api/auth/login');
    try {
      const response = await axios.post(`${baseURL}/login`, {
        email: testUser.email,
        password: testUser.password
      });
      console.log('‚úÖ Login Success:', response.data);
      userToken = response.data.token;
    } catch (error) {
      console.log('‚ùå Login Error:', error.response?.data || error.message);
    }

    if (!userToken) {
      console.log('‚ùå Kh√¥ng c√≥ token, d·ª´ng test');
      return;
    }

    const authHeaders = {
      'Authorization': `Bearer ${userToken}`,
      'Content-Type': 'application/json'
    };

    // 3. Test Get User Info
    console.log('\n3Ô∏è‚É£ Test GET /api/auth/me');
    try {
      const response = await axios.get(`${baseURL}/me`, { headers: authHeaders });
      console.log('‚úÖ Get User Info Success:', response.data);
    } catch (error) {
      console.log('‚ùå Get User Info Error:', error.response?.data || error.message);
    }

    // 4. Test Update User Info
    console.log('\n4Ô∏è‚É£ Test PUT /api/auth/me');
    try {
      const response = await axios.put(`${baseURL}/me`, {
        name: 'Test User Updated',
        username: 'testuser2025_updated'
      }, { headers: authHeaders });
      console.log('‚úÖ Update User Info Success:', response.data);
    } catch (error) {
      console.log('‚ùå Update User Info Error:', error.response?.data || error.message);
    }

    // 5. Test Update Password
    console.log('\n5Ô∏è‚É£ Test PUT /api/auth/me (change password)');
    try {
      const response = await axios.put(`${baseURL}/me`, {
        currentPassword: testUser.password,
        newPassword: 'newpassword123'
      }, { headers: authHeaders });
      console.log('‚úÖ Change Password Success:', response.data);
    } catch (error) {
      console.log('‚ùå Change Password Error:', error.response?.data || error.message);
    }

    // 6. Test Login with new password
    console.log('\n6Ô∏è‚É£ Test Login with new password');
    try {
      const response = await axios.post(`${baseURL}/login`, {
        email: testUser.email,
        password: 'newpassword123'
      });
      console.log('‚úÖ Login with new password Success:', response.data);
    } catch (error) {
      console.log('‚ùå Login with new password Error:', error.response?.data || error.message);
    }

    // 7. Test Logout
    console.log('\n7Ô∏è‚É£ Test POST /api/auth/logout');
    try {
      const response = await axios.post(`${baseURL}/logout`, {}, { headers: authHeaders });
      console.log('‚úÖ Logout Success:', response.data);
    } catch (error) {
      console.log('‚ùå Logout Error:', error.response?.data || error.message);
    }

    // 8. Test Register with duplicate email (should fail)
    console.log('\n8Ô∏è‚É£ Test Register with duplicate email (should fail)');
    try {
      const response = await axios.post(`${baseURL}/register`, testUser);
      console.log('‚ùå Duplicate Register should have failed:', response.data);
    } catch (error) {
      console.log('‚úÖ Duplicate Register correctly failed:', error.response?.data || error.message);
    }

    // 9. Test Login with wrong password (should fail)
    console.log('\n9Ô∏è‚É£ Test Login with wrong password (should fail)');
    try {
      const response = await axios.post(`${baseURL}/login`, {
        email: testUser.email,
        password: 'wrongpassword'
      });
      console.log('‚ùå Wrong password login should have failed:', response.data);
    } catch (error) {
      console.log('‚úÖ Wrong password login correctly failed:', error.response?.data || error.message);
    }

    // 10. Test accessing protected route without token (should fail)
    console.log('\nüîü Test GET /api/auth/me without token (should fail)');
    try {
      const response = await axios.get(`${baseURL}/me`);
      console.log('‚ùå No token request should have failed:', response.data);
    } catch (error) {
      console.log('‚úÖ No token request correctly failed:', error.response?.data || error.message);
    }

    console.log('\nüéâ Test ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói t·ªïng qu√°t:', error.message);
  }
};

testUserAuthEndpoints();
